Test for matrix_mul.py module
This module has a function that multiplies two matrices

Importing:
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> 

Multplying matrices with integers:
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[7, 10], [15, 22]]

Multiplying matrice with floats:
>>> print(matrix_mul([[1.5, 2.2], [6.4, 5.5]], [[5.4, 3.3], [2.4, 1.3]]))
[[13.380000000000003, 7.81], [47.760000000000005, 28.270000000000003]]
>>> 

Matrices not of same size:
>>> print(matrix_mul([[1, 2],[3, 4],[3, 4]], [[5, 6, 1], [7, 8, 2]]))
[[19, 22, 5], [43, 50, 11], [43, 50, 11]]
>>> 

Case string * matrix:
>>> a = "eddy"
>>> b = [[1, 2], [3,4]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
    raise TypeError('m_a must be a list')
TypeError: m_a must be a list

Case matrix * string:
>>> b = "python"
>>> a = [[1, 2], [3, 4]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
    raise TypeError('m_b must be a list')
TypeError: m_b must be a list

Case list * matrix:
>>> m_a = [1, 2, 3, 4]
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError('m_a must be a list of lists')
TypeError: m_a must be a list of lists

case matrix * list:
>>> m_a = [[1, 3], [4, 5]]
>>> m_b = [1, 2, 3, 4]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError('m_b must be a list of lists')
TypeError: m_b must be a list of lists
>>> 

Empty matrix * matrix:
>>> m_a = [[]]
>>> m_b = [[2, 4], [3, 5]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty

Matrix * empty matrix:
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> 

Case1 with element string:
>>> m_a = [[1, "3"], [7, 8]]
>>> m_b = [[5, 4], [3, 2]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError("m_a should contain only integers or floats")
TypeError: m_a should contain only integers or floats

case2 with element string:
>>> m_a = [[1, 3], [7, 8]]
>>> m_b = [[5, 4], ['3', 2]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError("m_b should contain only integers or floats")
TypeError: m_b should contain only integers or floats

NUMBER OF ROWS NOT SAME CASE 1:
>>> m_a = [[1, 5,  3], [7, 8]]
>>> m_b = [[5, 4], [3, 2]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError("each row of m_a must be of the same size")
TypeError: each row of m_a must be of the same size
 
 NUMBER OF ROWS NOT SAME CASE 2:
 >>> m_a = [[2, 4], [5, 4]]
>>> m_b = [[1, 2, 3], [4, 5]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise TypeError("each row of m_b must be of the same size")
TypeError: each row of m_b must be of the same size

NOt possible to multiply Case 1:
>>> m_a = [[1, 2, 3], [4, 5, 6]]
>>> m_b = [[3, 2,], [5, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
    raise ValueError("m_a and m_b can't be multiplied")
ValueError: m_a and m_b can't be multiplied

Missing one Argument:
>>> matrix_mul(m_a)
Traceback (most recent call last):
	...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'


Misssing both arguments:
>>> matrix_mul()
Traceback (most recent call last):
	...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
